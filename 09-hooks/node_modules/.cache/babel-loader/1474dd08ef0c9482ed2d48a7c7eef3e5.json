{"ast":null,"code":"var _jsxFileName = \"/Users/JamesNa/scripts/Web Dev/React/09-hooks/src/components/lifecycle.js\";\nimport React, { useEffect, useState } from 'react';\nexport default function Lifecycyle(props) {\n  const [time, setTime] = useState(new Date().toLocaleTimeString()); // side effects shoudl NOt be performed in the main body of the function\n  // they will be executed everytime the component is re-rendered\n  // setInterval(() => setTime(new Date().toLocaleTimeString()), 1000)\n  // the solution is to use useEffect\n  // The callback oassed ti useEffect will be executed after EVERY re-render (by default)\n  // It is effectivley equivilent to a componentDidUpdate in a class component (by default)\n\n  useEffect(() => {\n    setInterval(() => setTime(new Date().toLocaleTimeString()));\n  }, []); // note the second arg is an empty array\n\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, \"The current time is: \", time);\n}","map":{"version":3,"sources":["/Users/JamesNa/scripts/Web Dev/React/09-hooks/src/components/lifecycle.js"],"names":["React","useEffect","useState","Lifecycyle","props","time","setTime","Date","toLocaleTimeString","setInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,IAAIK,IAAJ,GAAWC,kBAAX,EAAD,CAAhC,CADqC,CAErC;AACA;AACA;AACA;AACA;AACA;;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,WAAW,CAAC,MAAMH,OAAO,CAAC,IAAIC,IAAJ,GAAWC,kBAAX,EAAD,CAAd,CAAX;AACH,GAFQ,EAEN,EAFM,CAAT,CATqC,CAW7B;;AAER,sBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAyBH,IAAzB,CAAR;AACH","sourcesContent":["import React, {useEffect, useState} from 'react';\n\nexport default function Lifecycyle(props){\n    const [time, setTime] = useState(new Date().toLocaleTimeString())\n    // side effects shoudl NOt be performed in the main body of the function\n    // they will be executed everytime the component is re-rendered\n    // setInterval(() => setTime(new Date().toLocaleTimeString()), 1000)\n    // the solution is to use useEffect\n    // The callback oassed ti useEffect will be executed after EVERY re-render (by default)\n    // It is effectivley equivilent to a componentDidUpdate in a class component (by default)\n\n    useEffect(() => {\n        setInterval(() => setTime(new Date().toLocaleTimeString()))\n    }, []); // note the second arg is an empty array\n\n    return (<p>The current time is: {time}</p>);\n}"]},"metadata":{},"sourceType":"module"}